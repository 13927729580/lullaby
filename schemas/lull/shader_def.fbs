include "lull/lull_common.fbs";
include "lull/material_def.fbs";
include "lull/texture_def.fbs";
include "lull/vertex_attribute_def.fbs";

namespace lull;

/// Shader data types.
enum ShaderDataType : uint {
  Float1,
  Float2,
  Float3,
  Float4,
  Int1,
  Int2,
  Int3,
  Int4,
  Float2x2,
  Float3x3,
  Float4x4,
  /// Complex types that may contain |ShaderDataType| inside of them.
  Struct,
  BufferObject,
  StorageBufferObject,
  // Texture types.
  Sampler2D,
}

/// Description of a shader uniform that is defined inside the shader program.
table ShaderUniformDef {
  /// Name of the uniform inside the shader.
  name: string;
  /// The uniform data type.
  type: ShaderDataType;
  /// Length of the array if it is an array [0 = not an array].
  array_size: uint = 0;
  /// Sub data fields [only valid if |type| is Struct, BufferObject or
  ///                  StorageBufferObject].
  fields: [ShaderUniformDef];
  /// The default values (of type float) to initialize this uniform. If the
  /// uniform isn't of float type, the values will be cast if possible.
  values: [float];
  /// The default values (of type int) to initialize this uniform.
  values_int: [int];
}

/// Associates a name with a texture usage and texture type.
table ShaderSamplerDef {
  /// The name of the sampler in the shader.
  name: string;
  /// The texture usage used to associate a texture with this sampler.
  usage: MaterialTextureUsage;
  /// The type of texture sampler (e.g. 2D, cube, etc).
  type: TextureTargetType;
}

/// Types of programmable shader stages.
enum ShaderStageType : ushort {
  /// The vertex stage processes each individual vertex and outputs a new
  /// vertex, typically in projection space.
  Vertex,
  /// The fragment stage receives output from the vertex stage and may output a
  /// set of colors and a single depth value that will potentially be written
  /// into the current framebuffers.
  Fragment,
}

/// Snippet containing shader source code or reference to a file containing the
/// source code.
table ShaderSnippetDef {
  // Name identifier for this snippet. This is mostly for debug purposes.
  name: string;

  /// Features implemented by this snippet.
  features: [uint] (hashvalue);
  /// Environment flags required for this snippet to work.
  environment: [uint] (hashvalue);

  /// Uniforms used by this snippet's shader code.
  uniforms: [ShaderUniformDef];
  /// Input data received by the snippet in the form of attributes or varying.
  inputs: [ShaderAttributeDef];
  /// Output data sent by the snippet in the form of attributes or varying.
  outputs: [ShaderAttributeDef];

  /// Shader source code for this snippet.
  code: string;
  /// Shader main() function implementation code for this snippet.
  main_code: string;

  /// Samplers used by this snippet's shader code.
  samplers: [ShaderSamplerDef];
}

/// A shader stage and associated snippets.
table ShaderStageDef {
  /// The shader stage type this def is associated with.
  type: ShaderStageType;
  /// Shader code snippets associated with this shader stage.
  snippets: [ShaderSnippetDef];
}

/// Shader attributes used to map shader inputs/outputs and vertex attributes as
///  inputs/outputs at different shader stages.
table ShaderAttributeDef {
  /// Name of the variable this attribute binds to.
  name: string;
  /// The data type of the attribute.
  type: VertexAttributeType;
  /// The usage of the attribute.
  usage: VertexAttributeUsage;
}

/// Contains the full description of a shader program, including its code.
table ShaderDef {
  /// Defined shader stages.
  stages: [ShaderStageDef];
}
