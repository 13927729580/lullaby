include "lull/common.fbs";

namespace lull;


enum DeformMode : int {
  None,
  /// Objects will be wrapped around a cylinder centered at world space 0,0,0
  GlobalCylinder,
  /// Objects will be bent based on their x and z distance from 0,0,0 in the
  /// Deformer's space.  The bend will be calculated as a cylinder wrap, with
  /// the cylinder centered at (0,0,horizontal_radius) in the Deformer's space.
  CylinderBend,
  // Objects will be bent based on a set of input and output points.
  Waypoint,
}

/// Any object that is being deformed by some other object up the stack will
/// need this def.  When *DeformedDef* is specified, the entity applies the
/// DeformerDef settings used by its parent.  If its parent doesn't have a
/// DeformedDef or a DeformerDef, it will not deform.
table DeformedDef {
  // Used in the waypoint deformation mode to select which waypoint path that
  // should apply to this deformed entity.
  waypoint_path_id: string;
}

/// Uses the DeformSystem to apply a cylindrical deformation to the entity. This
/// has the effect of bending it around the user.
/// Equivalent to a DeformDef with is_inherited set to true
table DeformerDef {
  deform_mode: DeformMode = CylinderBend;
  /// The radius of the cylinder to deform around (centered on the user).
  horizontal_radius: float;
  /// The angle at which a deformation around the Deformer will be clamped. This
  /// is equivalent to clamping a deformed entity's x position in the range
  /// [-clamp_angle * radius, clamp_angle * radius]. This only applies the
  /// CylinderBend deform mode, and negative values or 0.0 will indicate no
  /// clamping.
  clamp_angle: float = 0.0;
  // The paths along which the Watpoint deformation mode will deform entities.
  waypoint_paths: [WaypointPath];
}

table WaypointPath {
  // Optional identifier for this path. If specified this path will only apply
  // to Deformed entities with the matching path_id.
  path_id: string;
  // A list of nodes for mapping original positions and rotations to their new
  // deformations. The list should be internally ordered by the axis of interest
  // of the original_position node.
  waypoints: [Waypoint];
}

table Waypoint {
  // The xyz position in space used as the original reference point to
  // to match against in Waypoint deformations. Should be local to the
  // deformer's coordinate system.
  original_position: Vec3;
  // The xyz position in space used as the new position in space in
  // Waypoint deformations.
  remapped_position: Vec3;
  // The Euler angle used as the new mapping in Waypoint deformations.
  remapped_rotation: Vec3;
}

root_type DeformerDef;
