include "lull/common.fbs";
include "lull/physics_shapes.fbs";

namespace lull;

/// Defines how a physics simulation should treat this rigid body.
enum RigidBodyType : int {
  /// A standard rigid body (i.e. a pool ball or tumbling block).
  Dynamic,

  /// A completely immovable object (i.e. a floor).
  /// Note that Static rigid bodies will not produce contact events with other
  /// Static and Kinematic rigid bodies.
  /// TODO(b/63851094): mention ghost objects as a way of solving this.
  Static,

  /// A non-physics object that can move (i.e. an anchored moving platform). A
  /// Kinematic body will not have its transforms simulated, but will have its
  /// transform updated prior to each simulation update based on the
  /// TransformSystem.
  /// Note that Kinematic rigid bodies will not produce contact events with
  /// other Static and Kinematic rigid bodies.
  /// TODO(b/63851094): mention ghost objects as a way of solving this.
  Kinematic,
}

/// Describes the rigid body properties of an Entity for the physics simulation.
table RigidBodyDef {

  /// How the body should be simulated.
  type: RigidBodyType = Dynamic;

  /// The list of shapes for this body.
  /// TODO(b/64477700): add something about an empty / absent shape using the
  /// Entity's AABB.
  shapes: [PhysicsShapePart];

  /// The mass of the physics object in kg. If the body is Static, this will
  /// automatically be assigned a value of 0.
  mass: float;

  /// The frictional coefficient of the physics object. When two objects
  /// collide, the "total coefficient of friction" determines how much energy is
  /// lost due to friction. This value is per pair of materials, but in the
  /// simulation, it will be computed based on the individual coefficients. A
  /// reasonable range is [0, 1.1], with 0 being no friction at all and 1.1
  /// being the roughest surfaces. Most objects should fall in the range
  /// [0.5, 0.8].
  friction: float = 0.5;

  /// The restitution coefficient of the physics object. When two objects
  /// collide, the "total coefficient of restitution" determines how much
  /// kinetic energy is conserved. This value should be [0, 1], with 0 being
  /// nearly no "bounce", i.e. dropping a brick, and 1 being a nearly perfect
  /// "bounce", i.e. dropping a rubber ball.
  restitution: float = 0.0;

  /// Whether or not to enable simulation of this rigid body on create.
  enable_on_create: bool = true;

  /// The initial linear velocity for this rigid body.
  linear_velocity: Vec3 (defaults_to_null);

  /// The initial angular velocity for this rigid body (in Euler angles).
  angular_velocity: Vec3 (defaults_to_null);

  /// A translation to be applied to this rigid body's center of mass before
  /// pushing its transform into the physics simulation. The translation will
  /// be un-applied when pulling the transform from the simulation. Applied in
  /// local space.
  /// For example, if you made an Entity representing a character and wanted its
  /// position to be at its "feet", you could give it a 0.5 radius collision
  /// sphere and a center_of_mass_translation of (0, 0.5, 0).
  center_of_mass_translation: Vec3 (defaults_to_null);
}
