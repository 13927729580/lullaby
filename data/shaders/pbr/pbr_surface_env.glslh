#ifndef THIRD_PARTY_LULLABY_DATA_SHADERS_PBR_PBR_SURFACE_ENV_GLSLH_
#define THIRD_PARTY_LULLABY_DATA_SHADERS_PBR_PBR_SURFACE_ENV_GLSLH_

/// A port of Unity's Standard PBR surface shader, limited to environment
/// lights.

#include "third_party/lullaby/data/shaders/fragment_common.glslh"

#include "third_party/lullaby/data/shaders/pbr/env_map.glslh"
#include "third_party/lullaby/data/shaders/pbr/gamma.glslh"
#include "third_party/lullaby/data/shaders/pbr/pbr_surface_common.glslh"
#include "third_party/lullaby/data/shaders/pbr/specular_conversions.glslh"

#if LULLABY_PBR_TRANSPARENCY_SUPPORTED
// Controls blending of refracted or alpha-multiplied image.
uniform float surface_opacity;
#ifdef LULLABY_PBR_SCREEN_SPACE_REFRACTION
// To support transparency or refractive effects.
//
// Ratio of refractive indices.
uniform float refraction_eta;
// How much albedo tints the refraction.
uniform float refraction_color_transfer;
#endif  // LULLABY_PBR_SCREEN_SPACE_REFRACTION
#endif  // LULLABY_PBR_TRANSPARENCY_SUPPORTED

/// A modified form of the Surface shader that computes diffuse and specular
/// lighting using an environment map as the only light source.
vec3 EnvironmentShader(
    vec3 normal,            // Unit surface normal.
    vec3 cam_dir,           // Unit vector from shading point to camera.
    float smoothness,       // Unity's perceptual smoothness, in [0.0, 1.0].
    float reflectivity,     // Surface reflectivity, based on metallic + more.
    vec3 diffuse_color,     // Surface diffuse color, based on albedo + more.
    vec3 specular_color) {  // Surface specular color, based on albedo + more.
  vec3 refl_light_dir = reflect(-cam_dir, normal);

  // We have a perfect reflection since we computed refl_light_dir as an
  // explicit reflection of cam_dir about the normal. This simplifies the
  // n_dot_v and l_dot_h to n_dot_l, so we use n_dot_lv for all three.
  float n_dot_lv = clamp(dot(normal, refl_light_dir), 0.0, 1.0);

  float perceptual_roughness = SmoothnessToPerceptualRoughness(smoothness);

  // We omit the n_dot_l term here because it's relative to the specular
  // reflection. The diffuse reflection is free to choose L = N, so the only
  // darkening component is the DisneyDiffuseTerm.
  float diffuse_term =
      DisneyDiffuseTerm(n_dot_lv, n_dot_lv, n_dot_lv, perceptual_roughness);

  float roughness = PerceptualRoughnessToRoughness(perceptual_roughness);
  float surface_reduction = 1.0 / (roughness * roughness + 1.0);
  float grazing_term = clamp(smoothness + reflectivity, 0.0, 1.0);

  // See env_map.glslh regarding Env*Color().
  vec3 diffuse_part = diffuse_term * diffuse_color * EnvDiffuseColor(normal);
  vec3 fresnel_term = FresnelLerp(specular_color, vec3(grazing_term), n_dot_lv);
#if LULLABY_PBR_SCREEN_SPACE_REFL
  vec3 env_specular = EnvSpecularColor(refl_light_dir, -cam_dir, roughness);
#else  // LULLABY_PBR_SCREEN_SPACE_REFL
  vec3 env_specular = EnvSpecularColor(refl_light_dir, roughness);
#endif  // LULLABY_PBR_SCREEN_SPACE_REFL
  vec3 specular_part =
      specular_scale * surface_reduction * fresnel_term * env_specular;
  vec3 opaque_result = diffuse_part + specular_part;

#if LULLABY_PBR_TRANSPARENCY_SUPPORTED && defined(LULLABY_PBR_SCREEN_SPACE_REFRACTION)
  vec3 refr_light_dir = refract(-cam_dir, normal, refraction_eta);
  vec3 refr_result =
      ScreenSpaceRefraction(normal, -cam_dir, refraction_eta, roughness);
  refr_result *= mix(vec3(1.0), diffuse_color, refraction_color_transfer);
  return mix(refr_result, opaque_result, surface_opacity);
#else   // LULLABY_PBR_TRANSPARENCY_SUPPORTED && defined(LULLABY_PBR_SCREEN_SPACE_REFRACTION)
  return opaque_result;
#endif  // LULLABY_PBR_TRANSPARENCY_SUPPORTED && defined(LULLABY_PBR_SCREEN_SPACE_REFRACTION)
}

#endif  // THIRD_PARTY_LULLABY_DATA_SHADERS_PBR_PBR_SURFACE_ENV_GLSLH_
