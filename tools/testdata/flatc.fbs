// IMPORTANT.  This file should match the flatc_ref.fbs file, but without the
// corresponding Lullaby-specific attributes (eg. native_type, native_default).
// This allows us to compare the Lullaby-specific implementation against the
// default "reference" implementation.  This is especially important for
// benchmarking purposes.

namespace lull;

attribute "defaults_to_null";
attribute "dynamic";

struct Vec2 (native_type: "mathfu::vec2", native_default: "{0.f, 0.f}") {
  x: float;
  y: float;
}

struct Vec3 (native_type: "mathfu::vec3", native_default: "{0.f, 0.f, 0.f}") {
  x: float;
  y: float;
  z: float;
}

struct Vec4 (native_type: "mathfu::vec4", native_default: "{0.f, 0.f, 0.f, 0.f}") {
  x: float;
  y: float;
  z: float;
  w: float;
}

struct Quat (native_type: "mathfu::quat", native_default: "{0.f, 0.f, 0.f, 1.f}") {
  x: float;
  y: float;
  z: float;
  w: float;
}

table DataBool {
  value: bool;
}

table DataInt {
  value: int;
}

table DataFloat {
  value: float;
}

table DataHashValue {
  value: string;
}

table DataString {
  value: string;
}

table DataVec2 {
  value: Vec2;
}

table DataVec3 {
  value: Vec3;
}

table DataVec4 {
  value: Vec4;
}

table DataQuat {
  value: Quat;
}

union VariantDef {
  DataBool,
  DataInt,
  DataFloat,
  DataString,
  DataHashValue,
  DataVec2,
  DataVec3,
  DataVec4,
  DataQuat,
}

enum Day : byte {
  Monday,
  Tuesday,
  Wednesday,
  Thursday,
  Friday,
  Saturday,
  Suday
}

enum Flags : byte {
  High,
  Medium,
  Low,
}

enum BitFlags : byte (bit_flags) {
  High,
  Medium,
  Low,
}

struct InnerFixed {
  a : int;
  b : int;
  c : int;
}

struct MiddleFixed {
  t : int;
  in : InnerFixed;
  u : int;
  v : int;
}

struct OuterFixed {
  x : float;
  mid : MiddleFixed;
  y : float;
  z : float;
}

table Basics {
  b : bool;
  u8 : ubyte;
  i8 : byte;
  u16 : ushort;
  i16 : short;
  u32 : uint;
  i32 : int;
  u64 : ulong;
  i64 : long;
  r32 : float;
  r64 : double;
  str : string;
}

table Complex {
  day : Day;
  flag : Flags;
  bit_flag : BitFlags;
  out : OuterFixed;
  outs : [OuterFixed];
  name : string;
  names : [string];
  numbers : [int];
  basic : Basics;
  basics : [Basics];
  vec2: Vec2;
  vec2s: [Vec2];
  vec3: Vec3;
  vec3s: [Vec3];
  vec4: Vec4;
  vec4s: [Vec4];
  quat: Quat;
  quats: [Quat];
  variant : VariantDef;
  nullable_struct : InnerFixed (defaults_to_null);
  nullable_table : Basics (defaults_to_null);
  nullable_native : Vec2 (defaults_to_null);
  dynamic_table : Complex (dynamic);
}

root_type Complex;
file_identifier "DATA";
